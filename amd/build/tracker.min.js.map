{"version":3,"sources":["../src/tracker.js"],"names":["define","$","Timer","InactivityTimer","Ajax","Log","Tracker","sessionId","timer","inactivityTimer","prototype","addElapsedTime","elapsedTime","call","methodname","args","sessionid","elapsedtime","start","debug","on","ticks","getTicks","init","pause","logout"],"mappings":"AAeAA,OAAM,+BAAC,CAAC,QAAD,CAAW,2BAAX,CAAwC,sCAAxC,CAAgF,WAAhF,CAA6F,UAA7F,CAAD,CAA2G,SAASC,CAAT,CAAYC,CAAZ,CAAmBC,CAAnB,CAAoCC,CAApC,CAA0CC,CAA1C,CAA+C,CAE5J,GAAIC,CAAAA,CAAO,CAAG,SAASC,CAAT,CAAoB,CAC9B,KAAKC,KAAL,CAAa,IAAb,CACA,KAAKC,eAAL,CAAuB,IAAvB,CACA,KAAKF,SAAL,CAAiBA,CACpB,CAJD,CAYAD,CAAO,CAACI,SAAR,CAAkBC,cAAlB,CAAmC,SAASC,CAAT,CAAsB,CACrD,MAAOR,CAAAA,CAAI,CAACS,IAAL,CAAU,CAAC,CACdC,UAAU,CAAE,sCADE,CACsCC,IAAI,CAAE,CACtDC,SAAS,CAAE,KAAKT,SADsC,CAEtDU,WAAW,CAAEL,CAFyC,CAD5C,CAAD,CAAV,EAKH,CALG,CAMV,CAPD,CASAN,CAAO,CAACI,SAAR,CAAkBQ,KAAlB,CAA0B,UAAW,YAEjCb,CAAG,CAACc,KAAJ,CAAU,oBAAV,EAIA,KAAKX,KAAL,CAAa,GAAIN,CAAAA,CAAJ,CAAU,GAAV,CAAb,CACA,KAAKM,KAAL,CAAWU,KAAX,GAEAjB,CAAC,CAAC,KAAKO,KAAN,CAAD,CAAcY,EAAd,CAAiB,YAAjB,CAA+B,UAAM,CACjC,GAAMC,CAAAA,CAAK,CAAG,CAAI,CAACb,KAAL,CAAWc,QAAX,EAAd,CAEAjB,CAAG,CAACc,KAAJ,CAAU,eAAV,EAEA,GAAyB,CAArB,EAAAE,CAAK,EAAT,CAA4B,CACxBhB,CAAG,CAACc,KAAJ,gCACA,CAAI,CAACR,cAAL,GACH,CACJ,CATD,EAWA,KAAKF,eAAL,CAAuB,GAAIN,CAAAA,CAAJ,CAAoB,GAApB,CAA0B,EAA1B,CAA8B,CAA9B,CAAvB,CACA,KAAKM,eAAL,CAAqBc,IAArB,GAGAtB,CAAC,CAAC,KAAKQ,eAAN,CAAD,CAAwBW,EAAxB,CAA2B,UAA3B,CAAuC,UAAM,CACzC,CAAI,CAACZ,KAAL,CAAWgB,KAAX,EACH,CAFD,EAKAvB,CAAC,CAAC,KAAKQ,eAAN,CAAD,CAAwBW,EAAxB,CAA2B,QAA3B,CAAqC,UAAM,CACvC,CAAI,CAACZ,KAAL,CAAWU,KAAX,EACH,CAFD,EAKAjB,CAAC,CAAC,KAAKQ,eAAN,CAAD,CAAwBW,EAAxB,CAA2B,iBAA3B,CAA8C,UAAM,CAChD,CAAI,CAACX,eAAL,CAAqBgB,MAArB,EACH,CAFD,CAGH,CArCD,CAuCA,MAAOnB,CAAAA,CACV,CA/DK,CAAN","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\ndefine(['jquery', 'local_time_tracking/timer', 'local_time_tracking/inactivity_timer', 'core/ajax', 'core/log'], function($, Timer, InactivityTimer, Ajax, Log) {\n\n    let Tracker = function(sessionId) {\n        this.timer = null;\n        this.inactivityTimer = null;\n        this.sessionId = sessionId;\n    };\n\n    /**\n     * Add elapsed time to user session.\n     *\n     * @param {int} elapsedTime\n     * @returns {Promise}\n     */\n    Tracker.prototype.addElapsedTime = function(elapsedTime) {\n        return Ajax.call([{\n            methodname: 'local_time_tracking_add_elapsed_time', args: {\n                sessionid: this.sessionId,\n                elapsedtime: elapsedTime\n            }\n        }])[0];\n    };\n\n    Tracker.prototype.start = function() {\n\n        Log.debug('TIME_TRACKER: Init');\n\n        const interval = 3;\n\n        this.timer = new Timer(1000);\n        this.timer.start();\n\n        $(this.timer).on('timer.tick', () => {\n            const ticks = this.timer.getTicks();\n\n            Log.debug('TRACKER: Tick');\n\n            if (ticks % interval === 0) {\n                Log.debug('TRACKER: Add elapsed time ' + interval);\n                this.addElapsedTime(interval);\n            }\n        });\n\n        this.inactivityTimer = new InactivityTimer(5000, 15, 5);\n        this.inactivityTimer.init();\n\n        // When user goes inactive, stop tracking time.\n        $(this.inactivityTimer).on('inactive', () => {\n            this.timer.pause();\n        });\n\n        // When a user becomes active, continue tracking time.\n        $(this.inactivityTimer).on('active', () => {\n            this.timer.start();\n        });\n\n        // If user is inactive for too long log them out.\n        $(this.inactivityTimer).on('session_timeout', () => {\n            this.inactivityTimer.logout();\n        });\n    };\n\n    return Tracker;\n});"],"file":"tracker.min.js"}